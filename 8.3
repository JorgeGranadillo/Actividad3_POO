import math
import tkinter as tk
from tkinter import messagebox

"""
Programa de cálculo de volumen y superficie de figuras geométricas (Cilindro, Esfera, Pirámide).
Interfaz gráfica realizada con Tkinter.
Autor: Jorge Romario Granadillo Chávez
Fecha: Octubre 2025
"""

# ==============================
# CLASES DE FIGURAS GEOMÉTRICAS
# ==============================

class FiguraGeometrica:
    def __init__(self):
        self.volumen = 0.0
        self.superficie = 0.0


class Cilindro(FiguraGeometrica):
    def __init__(self, radio, altura):
        super().__init__()
        self.radio = radio
        self.altura = altura
        self.calcular_volumen()
        self.calcular_superficie()

    def calcular_volumen(self):
        self.volumen = math.pi * self.altura * math.pow(self.radio, 2)

    def calcular_superficie(self):
        area_lateral = 2 * math.pi * self.radio * self.altura
        area_bases = 2 * math.pi * math.pow(self.radio, 2)
        self.superficie = area_lateral + area_bases


class Esfera(FiguraGeometrica):
    def __init__(self, radio):
        super().__init__()
        self.radio = radio
        self.calcular_volumen()
        self.calcular_superficie()

    def calcular_volumen(self):
        self.volumen = (4 / 3) * math.pi * math.pow(self.radio, 3)

    def calcular_superficie(self):
        self.superficie = 4 * math.pi * math.pow(self.radio, 2)


class Piramide(FiguraGeometrica):
    def __init__(self, base, altura, apotema):
        super().__init__()
        self.base = base
        self.altura = altura
        self.apotema = apotema
        self.calcular_volumen()
        self.calcular_superficie()

    def calcular_volumen(self):
        self.volumen = (math.pow(self.base, 2) * self.altura) / 3

    def calcular_superficie(self):
        area_base = math.pow(self.base, 2)
        area_lateral = 2 * self.base * self.apotema
        self.superficie = area_base + area_lateral


# ===========================
# CLASES DE LAS VENTANAS GUI
# ===========================

# --- Función auxiliar para centrar las ventanas ---
def centrar_ventana(ventana, ancho, alto):
    x = (ventana.winfo_screenwidth() // 2) - (ancho // 2)
    y = (ventana.winfo_screenheight() // 2) - (alto // 2)
    ventana.geometry(f"{ancho}x{alto}+{x}+{y}")


# --- Ventana Cilindro ---
class VentanaCilindro(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("Cilindro")
        centrar_ventana(self, 280, 210)
        self.resizable(False, False)

        tk.Label(self, text="Radio (cm):").place(x=20, y=20)
        self.campo_radio = tk.Entry(self)
        self.campo_radio.place(x=100, y=20, width=135)

        tk.Label(self, text="Altura (cm):").place(x=20, y=50)
        self.campo_altura = tk.Entry(self)
        self.campo_altura.place(x=100, y=50, width=135)

        tk.Button(self, text="Calcular", command=self.calcular).place(x=100, y=80, width=135)

        self.volumen_lbl = tk.Label(self, text="Volumen (cm³):")
        self.volumen_lbl.place(x=20, y=120)
        self.superficie_lbl = tk.Label(self, text="Superficie (cm²):")
        self.superficie_lbl.place(x=20, y=150)

    def calcular(self):
        try:
            radio = float(self.campo_radio.get())
            altura = float(self.campo_altura.get())

            if radio <= 0 or altura <= 0:
                messagebox.showerror("Error", "Los valores deben ser positivos.")
                return

            cilindro = Cilindro(radio, altura)
            self.volumen_lbl.config(text=f"Volumen (cm³): {cilindro.volumen:,.2f}")
            self.superficie_lbl.config(text=f"Superficie (cm²): {cilindro.superficie:,.2f}")

        except ValueError:
            messagebox.showerror("Error", "Campo nulo o error en formato de número.")


# --- Ventana Esfera ---
class VentanaEsfera(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("Esfera")
        centrar_ventana(self, 280, 200)
        self.resizable(False, False)

        tk.Label(self, text="Radio (cm):").place(x=20, y=20)
        self.campo_radio = tk.Entry(self)
        self.campo_radio.place(x=100, y=20, width=135)

        tk.Button(self, text="Calcular", command=self.calcular).place(x=100, y=50, width=135)

        self.volumen_lbl = tk.Label(self, text="Volumen (cm³):")
        self.volumen_lbl.place(x=20, y=90)
        self.superficie_lbl = tk.Label(self, text="Superficie (cm²):")
        self.superficie_lbl.place(x=20, y=120)

    def calcular(self):
        try:
            radio = float(self.campo_radio.get())

            if radio <= 0:
                messagebox.showerror("Error", "El radio debe ser positivo.")
                return

            esfera = Esfera(radio)
            self.volumen_lbl.config(text=f"Volumen (cm³): {esfera.volumen:,.2f}")
            self.superficie_lbl.config(text=f"Superficie (cm²): {esfera.superficie:,.2f}")

        except ValueError:
            messagebox.showerror("Error", "Campo nulo o error en formato de número.")


# --- Ventana Pirámide ---
class VentanaPiramide(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("Pirámide")
        centrar_ventana(self, 280, 240)
        self.resizable(False, False)

        tk.Label(self, text="Base (cm):").place(x=20, y=20)
        self.campo_base = tk.Entry(self)
        self.campo_base.place(x=120, y=20, width=135)

        tk.Label(self, text="Altura (cm):").place(x=20, y=50)
        self.campo_altura = tk.Entry(self)
        self.campo_altura.place(x=120, y=50, width=135)

        tk.Label(self, text="Apotema (cm):").place(x=20, y=80)
        self.campo_apotema = tk.Entry(self)
        self.campo_apotema.place(x=120, y=80, width=135)

        tk.Button(self, text="Calcular", command=self.calcular).place(x=120, y=110, width=135)

        self.volumen_lbl = tk.Label(self, text="Volumen (cm³):")
        self.volumen_lbl.place(x=20, y=150)
        self.superficie_lbl = tk.Label(self, text="Superficie (cm²):")
        self.superficie_lbl.place(x=20, y=180)

    def calcular(self):
        try:
            base = float(self.campo_base.get())
            altura = float(self.campo_altura.get())
            apotema = float(self.campo_apotema.get())

            if base <= 0 or altura <= 0 or apotema <= 0:
                messagebox.showerror("Error", "Los valores deben ser positivos.")
                return

            piramide = Piramide(base, altura, apotema)
            self.volumen_lbl.config(text=f"Volumen (cm³): {piramide.volumen:,.2f}")
            self.superficie_lbl.config(text=f"Superficie (cm²): {piramide.superficie:,.2f}")

        except ValueError:
            messagebox.showerror("Error", "Campo nulo o error en formato de número.")


# --- Ventana Principal ---
class VentanaPrincipal(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Cálculo de Figuras Geométricas")
        centrar_ventana(self, 350, 180)
        self.resizable(False, False)

        tk.Label(self, text="Seleccione una figura geométrica", font=("Arial", 12, "bold")).pack(pady=15)

        tk.Button(self, text="Cilindro", command=self.abrir_cilindro).place(x=30, y=70, width=80)
        tk.Button(self, text="Esfera", command=self.abrir_esfera).place(x=135, y=70, width=80)
        tk.Button(self, text="Pirámide", command=self.abrir_piramide).place(x=235, y=70, width=80)

        tk.Label(self, text="© 2025 - Jorge Romario Granadillo", font=("Arial", 8)).pack(side="bottom", pady=5)

    def abrir_cilindro(self):
        VentanaCilindro(self)

    def abrir_esfera(self):
        VentanaEsfera(self)

    def abrir_piramide(self):
        VentanaPiramide(self)


# ===========================
# PUNTO DE ENTRADA DEL PROGRAMA
# ===========================

if __name__ == "__main__":
    app = VentanaPrincipal()
    app.mainloop()
